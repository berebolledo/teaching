summ(logreg4, exp = TRUE)
summ(logreg5, exp = TRUE)
# MULTIPLE "ENTER" (SPSS) METHOD - OR SIMPLY "FULL" MODEL
logmulreg <- glm(FALLECIDO ~ COMORBIL + ASPIRACI + FRECRESP + EDAD)
# MULTIPLE "ENTER" (SPSS) METHOD - OR SIMPLY "FULL" MODEL
logmulreg <- glm(FALLECIDO ~ COMORBIL + ASPIRACI + FRECRESP + EDAD, data = data , family = "binomial")
summ(logmulreg)
summ(logmulreg, exp = TRUE)
library(olsrr)
# MULTIPLE "ENTER" (SPSS) METHOD - OR SIMPLY "FULL" MODEL ----------------
logmulti <- glm(FALLECIDO ~ COMORBIL + ASPIRACI + FRECRESP + EDAD, data = data , family = "binomial")
summ(logmulti, exp = TRUE)
m2 <- ols_step_backward_p(logmulti, details = TRUE)
library(MASS)
m1 <- stepAIC(logmulti, direction = "both", trace=FALSE)
summ(m1)
m1 <- stepAIC(logmulti, direction = "forward", trace=FALSE)
m1 <- stepAIC(logmulti, direction = "forward", trace=FALSE)
m2 <- stepAIC(logmulti, direction = "backward", trace=FALSE)
m3 <- stepAIC(logmulti, direction = "both", trace=FALSE)
if(!require(MASS)){
install.packages("MASS")
library(MASS)
}
m1 <- stepAIC(logmulti, direction = "forward", trace=FALSE)
m2 <- stepAIC(logmulti, direction = "backward", trace=FALSE)
m3 <- stepAIC(logmulti, direction = "both", trace=FALSE)
summ(m1)
summ(m1, exp = TRUE)
summ(m2, exp = TRUE)
summ(m3, exp = TRUE)
summ(m1, exp = TRUE)
m2 <- stepAIC(logmulti, direction = "backward", trace=FALSE)
m3 <- stepAIC(logmulti, direction = "both", trace=FALSE)
summ(m3, exp = TRUE)
summ(m1, exp = TRUE)
summ(m1, exp = TRUE)
summ(logmulti, exp = TRUE)
# MULTIPLE "ENTER" (SPSS) METHOD - OR SIMPLY "FULL" MODEL ----------------
logmulti <- glm(FALLECIDO ~ COMORBIL + ASPIRACI + FRECRESP + EDAD, data = data , family = "binomial")
summ(logmulti, exp = TRUE)
m1 <- stepAIC(logmulti, direction = "forward", trace=FALSE)
summ(m1, exp = TRUE)
m2 <- stepAIC(logmulti, direction = "backward", trace=FALSE)
summ(m2, exp = TRUE)
summ(m3, exp = TRUE)
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = TRUE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct
chisq.test(ct)
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
chisq.test(ct)
ct
row.names(ct) <- c("<40", "40-75", ">75")
col.names(ct) <- c("No", "Si")
rownames(ct) <- c("<40", "40-75", ">75")
colnames(ct) <- c("No", "Si")
chisq.test(ct)
ct
chisq.test(ct)
expected(ct)
# Build regression model
agelogreg <- glm(FALLECIDO ~ ageCategory, data = data, family = "binomial")
summ(agelogreg, exp = TRUE )
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = FALSE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-75", ">75")
colnames(ct) <- c("No", "Si")
ct
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 74, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = FALSE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-7", ">75")
colnames(ct) <- c("No", "Si")
ct
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 74, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = TRUE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-7", ">75")
colnames(ct) <- c("No", "Si")
ct
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = TRUE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-7", ">75")
colnames(ct) <- c("No", "Si")
ct
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = TRUE)
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = TRUE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-75", ">75")
colnames(ct) <- c("No", "Si")
ct
?cut
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = TRUE, right = TRUE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-75", ">75")
colnames(ct) <- c("No", "Si")
ct
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = FALSE, right = TRUE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-75", ">75")
colnames(ct) <- c("No", "Si")
ct
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(40, 75),
labels=c(0, 1, 2), include.lowest = TRUE)
# Multilevel variables ---------------------------------------------------------
# Define age ranges <40, >=40&<75, >=75
ageCategory <- cut(data$EDAD,
breaks=c(min(data$EDAD), 40, 75, max(data$EDAD)),
labels=c(0, 1, 2), include.lowest = FALSE)
data$ageCategory <- factor(ageCategory, levels = c(0,1,2))
# Check frequency distribution
table(ageCategory)
# Evaluate relationship between variables
ct <- xtabs(data = data[, c("FALLECIDO", "ageCategory")])
ct <- t(ct)
rownames(ct) <- c("<40", "40-75", ">75")
colnames(ct) <- c("No", "Si")
ct
expected(ct)
chisq.test(ct)
# Build simple regression model
agelogreg <- glm(FALLECIDO ~ ageCategory, data = data, family = "binomial")
summ(agelogreg, exp = TRUE )
d <- data[, c("FALLECIDO", "ageCategory")]
dummydata <- dummy_cols(d, select_columns = 'ageCategory', remove_selected_columns = TRUE)
View(dummydata)
summ(dummyreg, exp = TRUE)
d <- data[, c("FALLECIDO", "ageCategory")]
dummydata <- dummy_cols(d, select_columns = 'ageCategory', remove_selected_columns = TRUE)
View(dummydata)
dummyreg <- glm(FALLECIDO ~ ageCategory, data = data, family = "binomial")
summ(dummyreg, exp = TRUE)
dummyreg <- glm(FALLECIDO ~ ageCategory, data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
dummyreg <- glm(FALLECIDO ~ ., data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
dummyreg <- glm(FALLECIDO ~ ., data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
?dummy_cols
d <- data[, c("FALLECIDO", "ageCategory")]
View(d)
dummydata <- dummy_cols(d, select_columns = 'ageCategory', remove_selected_columns = TRUE)
View(dummydata)
dummyreg <- glm(FALLECIDO ~ ., data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
summary(dummyreg)
summary(dummyreg)
exp(coef(dummyreg))
exp(confint(dummyreg))
nagelkerke(dummyreg)
summ(dummyreg, exp = TRUE)
class(dummydata$ageCategory_0)
class(dummydata$ageCategory_1)
apply(dummydata, 2, as.factor)
dummydata <- apply(dummydata, 2, as.factor)
dummyreg <- glm(FALLECIDO ~ ageCategory, data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
d <- data[, c("FALLECIDO", "ageCategory")]
dummydata <- dummy_cols(d, select_columns = 'ageCategory', remove_selected_columns = TRUE)
dummydata$FALLECIDO <- as.factor(dummydata$FALLECIDO)
dummydata$ageCategory_0 <- as.factor(dummydata$ageCategory_0)
dummydata$ageCategory_1 <- as.factor(dummydata$ageCategory_1)
dummydata$ageCategory_2 <- as.factor(dummydata$ageCategory_2)
dummydata$ageCategory_NA <- as.factor(dummydata$ageCategory_NA)
dummyreg <- glm(FALLECIDO ~ ageCategory, data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
class(dummydata$ageCategory_1)
dummyreg <- glm(FALLECIDO ~ ageCategory, data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
d <- data[, c("FALLECIDO", "ageCategory")]
dummydata <- dummy_cols(d, select_columns = 'ageCategory', remove_selected_columns = TRUE)
dummydata$FALLECIDO <- as.factor(dummydata$FALLECIDO)
dummydata$ageCategory_0 <- as.factor(dummydata$ageCategory_0)
dummydata$ageCategory_1 <- as.factor(dummydata$ageCategory_1)
dummydata$ageCategory_2 <- as.factor(dummydata$ageCategory_2)
dummydata$ageCategory_NA <- as.factor(dummydata$ageCategory_NA)
source("~/Desktop/taller/scripts/Untitled.R", echo=TRUE)
d <- data[, c("FALLECIDO", "ageCategory")]
dummydata <- dummy_cols(d, select_columns = 'ageCategory', remove_selected_columns = TRUE)
dummydata$FALLECIDO <- as.factor(dummydata$FALLECIDO)
dummydata$ageCategory_0 <- as.factor(dummydata$ageCategory_0)
dummydata$ageCategory_1 <- as.factor(dummydata$ageCategory_1)
dummydata$ageCategory_2 <- as.factor(dummydata$ageCategory_2)
dummydata$ageCategory_NA <- as.factor(dummydata$ageCategory_NA)
dummyreg <- glm(FALLECIDO ~ ageCategory, data = d, family = "binomial")
summ(dummyreg, exp = TRUE)
summary(dummyreg)
View(dummydata)
d <- c( 0.57216, 0.51625, 0.49471, 0.4891, 50.48515)
plot(d)
d <- c( 0.57216, 0.51625, 0.49471, 0.48915, 0.48515)
plot(d)
plot(d, '-')
plot(d, type = '-')
plot(d, type = 'b')
plot(d, type = 'b', xlab = "K", ylab = "CV")
library(readxl)
mitocarta <- read_excel("Desktop/Human.MitoCarta3.0.xls",
sheet = "A Human MitoCarta3.0")
View(mitocarta)
library(AnnotationHub)
install.packages("AnnotationHub")
library("org.Hs.eg.db")
intall.packages("org.Hs.eg.db")
install.packages("org.Hs.eg.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("AnnotationHub")
library(AnnotationHub)
library("org.Hs.eg.db")
hs <- org.Hs.eg.db
ids2 <- as.character(mitocarta$HumanGeneID)
AnnotationDbi::mapIds(hs, keys = ids2, column='SYMBOL', keytype='ENTREZID')
symbol <- AnnotationDbi::mapIds(hs, keys = ids2, column='SYMBOL', keytype='ENTREZID')
head(symbol)
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
library("TxDb.Hsapiens.UCSC.hg38.knownGene")
ls
ls('package:TxDb.Hsapiens.UCSC.hg38.knownGene')
TxDb.Hsapiens.UCSC.hg38.knownGene
?TxDb.Hsapiens.UCSC.hg38.knownGene
tx <- transcripts(TxDb.Hsapiens.UCSC.hg38.knownGene)
View(tx)
head(tx)
head(symbol)
install.apckages("biomaRt")
install.packages("biomaRt")
install.packages("biomaRt")
install.packages("biomaRt")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
BiocManager::install("biomaRt", force = TRUE)
library(biomaRt)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch38.ensembl
)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch38.ensembl")
?useMart
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch37.ensembl")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "grch38.ensembl.org")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://grch38.ensembl.org")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://grch37.ensembl.org")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://hg38.ensembl.org")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org/Homo_sapiens")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org")
rm(ensembl)
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org/Homo_sapiens")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org")
ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl", host = "https://www.feb2023.ensembl.org")
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
quit()
090623_WESChileN386_ApplyVQSR_SNP_INDEL.hg38_multianno_plink <- read.csv("~/Desktop/090623_WESChileN386_ApplyVQSR_SNP_INDEL.hg38_multianno_plink.csv")
library(readr)
db <- read_csv("Desktop/090623_WESChileN386_ApplyVQSR_SNP_INDEL.hg38_multianno_plink.csv")
View(db)
library(dplyr)
db %>%
filter(Gene.refGene = "HCN1")
db %>%
filter(!grepl('HCN1', Gene.refGene))
db %>%
filter(grepl('HCN1', Gene.refGene))
View(db %>%
filter(grepl('HCN1', Gene.refGene)))
save.image("~/Library/CloudStorage/GoogleDrive-berebolledo@gmail.com/My Drive/UDD/research/bioinformatics/SABIO/projects/00_my_research/01_colabs/decipherd/searchWES/searchWES.RData")
load("~/Library/CloudStorage/GoogleDrive-berebolledo@gmail.com/My Drive/UDD/research/bioinformatics/SABIO/projects/00_my_research/01_colabs/decipherd/searchWES/searchWES.RData")
library(dplyr)
View(db %>%
filter(grepl('CHD3', Gene.refGene)))
View(db %>%
filter(grepl('NAA15', Gene.refGene)))
View(db %>%
filter(grepl('CLCN3', Gene.refGene)))
View(db %>%
filter(grepl('GRIK2', Gene.refGene)))
View(db %>%
filter(grepl('SMOC1', Gene.refGene)))
View(db %>%
filter(grepl('CDC42BPB', Gene.refGene)))
View(db %>%
filter(grepl('TLK2', Gene.refGene)))
View(db %>%
filter(grepl('GOLGA6L10', Gene.refGene)))
View(db %>%
filter(grepl('TTN', Gene.refGene)))
.libPaths()
q()
library(ggplot2)
q()
library(readxl)
wc <- read_excel("Desktop/Wordcloud - Epigenética - Medicina 2024(1-1).xlsx")
View(wc)
wc[,9]
strsplit(wc[,9])
strsplit(wc[,9], split = " ")
strsplit(wc[,9], split = "")
strsplit(wc[,9], split = \\s+)
strsplit(wc[,9], split = "\\s+")
exit()
quit()
?cohen
??cohen
?ES.h
??ES.h
library(effsize)
install.packages("effsize")
library(effsize)
install.packages("pwr")
library(pwr)
?ES.h
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.9, type = "two.sample")
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.9, type = "two.sample", "less")
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.9, type = "two.sample", alternative = "less")
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.9)
234*1.1
234*1.1 * 2
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
175*1.1
175*1.1*2
pwr.t.test(d = 0.4, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
?ES.h
cohen.ES(test = "t", size = "medium")
cohen.ES(test = "t", size = "small")
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.9)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.9)
pwr.t.test(d = 0.4, sig.level = 0.05, power = 0.9)
pwr.t.test(d = 0.4, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.2, sig.level = 0.05, power = 0.8)
pwr.t.test(d = 0.3, sig.level = 0.05, power = 0.8)
setwd("/Users/boris/Library/CloudStorage/GoogleDrive-berebolledo@gmail.com/My Drive/UDD/research/bioinformatics/SABIO/projects/03_github_repos/teaching/Bioestadistica")
library(readr)      # Lector de datos
library(xlsx)       # Escritor de datos en formato Excel
library(epiDisplay) # Funciones epidemiologicas
library(ggplot2)    # Graficos
library(tidyverse)  # Manipulacion de tablas
library(gtsummary)  # Creacion de tablas resumen
library(pwr)        # Analisis de potencia y calculo de n para tests
library(summarytools)
grd22 <- read_delim("grd22_10000.txt", delim = "|",
escape_double = FALSE,
trim_ws = TRUE)
# Ver tabla
View(grd22)
# Arreglar columna IR_29301_PESO para que sea numerica
grd22$IR_29301_PESO <- gsub(",", ".", grd22$IR_29301_PESO)
grd22$IR_29301_PESO <- as.numeric(grd22$IR_29301_PESO)
# Arreglar columna IR_29301_PESO para que sea numerica
grd22$IR_29301_PESO <- gsub(",", ".", grd22$IR_29301_PESO)
grd22$IR_29301_PESO <- as.numeric(grd22$IR_29301_PESO)
# Calcular edad como la diferencia de fecha de nacimiento e ingreso
grd22$EDAD <- (as.Date(grd22$FECHA_INGRESO) - as.Date(grd22$FECHA_NACIMIENTO))/365
grd22$EDAD <- as.numeric(grd22$EDAD)
grd22$EDAD <- round(grd22$EDAD,1)
# Calculo de dias de hospitalizacion
grd22$DIASHOSP <- as.Date(grd22$FECHAALTA) - as.Date(grd22$FECHA_INGRESO)
grd22$DIASHOSP <- as.numeric(grd22$DIASHOSP)
# Ejemplo de seleccion de variables
dat <- grd22 %>% select(SEXO, EDAD, ETNIA, TIPO_INGRESO, DIAGNOSTICO1, IR_29301_PESO, DIASHOSP)
View(dat)
# Ejemplo de filtrado por condicion
dat %>% filter(TIPO_INGRESO == "URGENCIA")
# Ejemplo: Solo las filas con CIE10 K35.XX
dat %>% filter(grepl("K35\\.[0-9]*", grd22$DIAGNOSTICO1))
# Selecciona, filtra y guarda en un nuevo archivo
mydat <- dat %>%
select(SEXO, EDAD, ETNIA, TIPO_INGRESO, DIAGNOSTICO1,IR_29301_PESO, DIASHOSP) %>%
filter(grepl("K35\\.[0-9]*", grd22$DIAGNOSTICO1))
write.csv(mydat, "mydat.csv", row.names = FALSE)
dfSummary(mydat)
# Contruye una tabla de frecuencias
freq.table <- tab1(mydat$SEXO, graph = FALSE)
# Revisa la tabla
freq.table
# Guarda la tabla en Excel
write.xlsx(freq.table, "freq.table.xlsx")
# Grafico de barras basico
ggplot(data = mydat, aes(x = SEXO)) +
geom_bar()
# Grafico de barras con opciones de estilo
ggplot(data = mydat, aes(x = SEXO)) +
geom_bar(fill = "steelblue") +
labs(title = "Frecuencia Absoluta de la variable SEXO",
x = "Sexo",
y = "Frecuencia Absoluta")
tbl_summary(mydat, by = "SEXO",
type = list(IR_29301_PESO ~ 'continuous'),
statistic = list(all_continuous() ~ "{mean} ({sd})" ))
# Grafico de barras con opciones de estilo
ggplot(data = mydat, aes(x = SEXO)) +
labs(title = "Frecuencia Absoluta de la variable SEXO",
x = "Sexo",
y = "Frecuencia Absoluta")
# Grafico de barras con opciones de estilo
ggplot(data = mydat, aes(x = SEXO)) +
geom_bar(fill = "steelblue") +
labs(title = "Frecuencia Absoluta de la variable SEXO",
x = "Sexo",
y = "Frecuencia Absoluta")
tbl_summary(mydat, by = "SEXO",
type = list(IR_29301_PESO ~ 'continuous'),
statistic = list(all_continuous() ~ "{mean} ({sd})" ))
# Histogram simple
ggplot(data = mydat, aes(x = EDAD)) +
geom_histogram()
# Histograma con mas opciones de estilo
ggplot(data = mydat, aes(x = EDAD, fill = SEXO)) +
geom_histogram(alpha = 0.5, bins = 30, color = "black") +
labs(title = "", x = "", y = "") +
annotate(geom= "text", x = 8, y = 40, label="")
# Boxplot Simple
ggplot(data = mydat, aes(x = EDAD)) +
geom_boxplot()
#Boxplot con mas opciones de estilo
ggplot(data = mydat, aes(x = EDAD, fill = SEXO)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "My title", x = "X label", y = "") +
theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +
annotate(geom= "text", x = 2.75, y = -0.4, label="")
ci(mydat$EDAD, alpha = 0.05)
ci(mydat$EDAD, alpha = 0.01)
freq.table
ci(mydat$SEXO == "MUJER" )
